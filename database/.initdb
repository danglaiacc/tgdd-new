DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

create table manufacturer(id serial primary key, name varchar(10), img_demo varchar(24));
create table series(id serial primary key, name varchar(20), manu_id serial, foreign key (manu_id) references manufacturer(id));

create table product(id serial primary key, name varchar(18), sale_price serial, orig_price serial, screen varchar(80), os varchar(24), camera_sau varchar(57), camera_truoc varchar(50), cpu varchar(30), ram varchar(8), rom varchar(8), sim varchar(40), pin varchar(25), img_demo varchar(60), img_slider varchar(1330), article varchar(14000), series_id serial, foreign key (series_id) references series(id));
ALTER TABLE product ALTER COLUMN orig_price DROP NOT NULL;

create table color(
 id serial, name varchar(20), img_demo varchar(70), product_id serial, img_slide varchar(800), primary key(id,product_id), foreign key(product_id) references product(id)
);

create table customer(id varchar(20) primary key, password varchar(20), fullname varchar(30), phone char(10), address varchar(200));

create table comment(customer_id varchar(20), product_id serial, time_up timestamp DEFAULT Now(), content varchar(3000), rate_star serial, time_resolved timestamp default now(), handler varchar(20) default '', foreign key (customer_id) references customer(id), foreign key (product_id) references product(id), primary key (product_id, customer_id, time_up));

create table branch(
 id serial primary key, address varchar(140), district varchar(60), province varchar(20), longitude float, latitude float, zipcode char(6)
);

create table invoice(
 id serial primary key, customer_id varchar(50), status int default (2), -- 0 là giỏ hàng, 1 là đã đặt & đang giao, 2 là đã giao
 time_invoice timestamp default now(), time_receive timestamp default now(), branch_id int default 0, address_receive varchar(200),
 receiver_name varchar(100), receiver_phone char(10),
 note varchar, foreign key (customer_id) references customer(id), foreign key (branch_id) references branch(id)
);

create table invoice_detail(
  invoice_id serial, product_id serial, color_id serial, quantity int default 1, product_price serial, discount serial, primary key (invoice_id, product_id, color_id), 
	foreign key (invoice_id) references invoice(id),
	foreign key (product_id) references product(id)
);
	
-- Thêm tài khoản vào bảng, nếu username đã tồn tại sẽ trả về 1, nếu thêm thành công trả về 0
CREATE OR REPLACE FUNCTION addCustomer(
 id2 varchar(20), password varchar(20), fullname varchar(30), phone char(10), address varchar(200), gender boolean
) RETURNS integer 
LANGUAGE plpgsql 
AS $function$
begin if (
 exists (
  select id
  from customer
  where id = id2
 )
) then return 1;
else
insert into customer values(id2, password, fullname, phone, address, gender);
return 0;
end if;
end;
$function$;

CREATE OR REPLACE FUNCTION addInvoice(
  usr2 varchar(50),  status2 integer,  branch_id2 integer,  address_receive2 varchar(200),  receiver_name2 varchar(100),  receiver_phone2 char(10),  note2 varchar,  modal_id2 integer,  color_id2 integer,  quantity2 integer,  modal_price2 integer,  discount2 integer
) RETURNS integer 
LANGUAGE plpgsql 
AS $function$
DECLARE
   iv_id integer;
begin
insert into invoice(
    customer_id, status, time_invoice, time_receive, branch_id, address_receive, receiver_name, receiver_phone, note
  ) values(usr2, 2, default, default, 0, address_receive2, receiver_name2, receiver_phone2, note2
  ) RETURNING id INTO iv_id;

insert into invoice_detail values(iv_id, modal_id2, color_id2, quantity2, modal_price2, discount2);

return iv_id;
end;
$function$;

--- trigger check customer existed
CREATE OR REPLACE FUNCTION before_add_customer() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$ 
begin 
  if exists (select id from customer where id = NEW.id) then
	  return null;
	END IF;
	RETURN NEW;
end;
$function$;

CREATE TRIGGER tg_before_add_customer
    BEFORE INSERT ON customer
    FOR EACH ROW EXECUTE PROCEDURE before_add_customer();
--- // end trigger check customer id existed

--- trigger check comment existed
CREATE OR REPLACE FUNCTION before_add_comment() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$ 
begin 
  if exists (select customer_id from comment where customer_id = NEW.customer_id and product_id = NEW.product_id and time_up = NEW.time_up) then
	  return null;
	END IF;
	RETURN NEW;
end;
$function$;

CREATE TRIGGER tg_before_add_comment
    BEFORE INSERT ON comment
    FOR EACH ROW EXECUTE PROCEDURE before_add_comment();
--- // end trigger check comment id existed

--- trigger check color existed
CREATE OR REPLACE FUNCTION before_add_color() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$ 
begin 
  if exists (select id from color where id = NEW.id and product_id=NEW.product_id) then
	  return null;
	END IF;
	RETURN NEW;
end;
$function$;

CREATE TRIGGER tg_before_add_color
    BEFORE INSERT ON color
    FOR EACH ROW EXECUTE PROCEDURE before_add_color();
--- // end trigger check product id existed

--- trigger check product id existed
CREATE OR REPLACE FUNCTION before_add_product() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$ 
begin 
  if exists (select id from product where id=NEW.id) then
	  return null;
	END IF;
	RETURN NEW;
end;
$function$;

CREATE TRIGGER tg_before_add_product
    BEFORE INSERT ON product
    FOR EACH ROW EXECUTE PROCEDURE before_add_product();
--- // end trigger check product id existed


--- trigger check series existed

CREATE OR REPLACE FUNCTION before_add_series() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$ 
begin 
  if exists (select name from series where name = NEW.name and manu_id=NEW.manu_id) then
	  return null;
	END IF;
	
	RETURN NEW;

end;
$function$;

CREATE TRIGGER tg_before_add_series
    BEFORE INSERT ON series
    FOR EACH ROW EXECUTE PROCEDURE before_add_series();
--- // end trigger check series existed

--- Trigger comment -> invoice

CREATE OR REPLACE FUNCTION add_invoice_by_comment() RETURNS TRIGGER 
LANGUAGE plpgsql 
AS $function$
DECLARE
   invoice_id_auto int;
	 color_id int;
	 sale_price2 int;
begin 
	select min(id) into color_id
	from color
	where product_id = NEW.product_id
	group by product_id;
	
	select sale_price into sale_price2
	from product
	where id = NEW.product_id;
	
	insert into invoice(customer_id, time_invoice, branch_id) values
	(NEW.customer_id, NEW.time_up, floor(random() * 1658)) RETURNING id INTO invoice_id_auto;
	
	insert into invoice_detail(invoice_id, product_id, color_id, product_price, discount, quantity) values
	(invoice_id_auto, NEW.product_id, color_id, sale_price2, 0, floor(random() * 3 + 1)); --- random from [1:3]
	RETURN NULL;
end;
$function$;

CREATE TRIGGER tg_add_invoice_by_comment
    AFTER INSERT ON comment
    FOR EACH ROW
    EXECUTE PROCEDURE add_invoice_by_comment();
		
--- # END TRIGGER comment -> invoice

/*
ALTER TABLE comment DISABLE TRIGGER tg_add_invoice_by_comment
ALTER TABLE comment ENABLE TRIGGER tg_add_invoice_by_comment
*/
